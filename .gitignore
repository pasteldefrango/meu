var tela = 7;
//menu 0
//jogo tela 1
//controle tela 2
//guia tela 3
//créditos tela 4
//jogo 5
//tela de derrota 6
//intro 7

let directions = ['up', 'right', 'down', 'left'];
let sequenceIndex = 0;
let directionIndex = 0;
let arcaneBackground;
let mySound;
let plane;
let drops = [];
let introGif;
let tela=7;

 function preload() {
arcaneBackground = loadImage('https://i.imgur.com/1r3b5Xs.gif');
    pressStartFont = loadFont('PressStart2P-Regular.ttf');
   mySound = loadSound('msg.mp3');
   introGif = loadImage('intro.gif.gif');
 }
function setup() {
  

  createCanvas(600, 400);
   textFont(pressStartFont);
  plane = new Plane();
  let button = createButton('Play/Pause');
  button.mousePressed(toggleSound);
  function toggleSound() {
  if (mySound.isPlaying()) {
    mySound.stop();
  } else {
    mySound.play();
  }
}
}
function draw() {
  image(arcaneBackground, 0, 0, width, height);
  if (tela == 0) {
    fill(128);
    rect(330, 200, 200, 50);
    textSize(20);
    
    fill(0);
    text("Controles", 430, 225);
    fill(128);
    rect(70, 200, 200, 50);
    
    fill(0);
    text("Jogar", 170, 225);
    fill(128);
    rect(70, 280, 200, 50);
    fill(0);
    text("Guia", 170, 305);
    fill(128);
    rect(330, 280, 200, 50);
    
    fill(0)
    text("Créditos", 425, 305);
    fill(200,00,50);
    textSize(40);
    text("Jogo inglês", 290, 130);
  } else if (tela == 1) {
    rect(200,150,100,60)
    fill(0);
    textSize(20);
    textSize(20);
    fill(128);
    textSize(17)
    rect(450, 330, 130, 50);
     fill(255);
    text("Voltar", 465, 365, 80);
    fill(255)
    text("selecione o quadrado para iniciar",20, 100, 800)
    
  } else if (tela == 2) {
    textSize(30);
    text("Controles", 140, 140, 10);
    fill(128);
    rect(450, 320, 120, 50);
     fill(255);
    textSize(17)
    text("Voltar", 460, 355, 80);
  } else if (tela==3){
     textSize(30);
    text("Guia", 140, 140, 10);
    fill(128);
    rect(450, 320, 120, 50);
     fill(255);
    textSize(17)
    text("Voltar", 460, 355, 80);
   } else if (tela==4){
      textSize(30);
    text("Créditos", 140, 140, 10);
     fill(128);
    rect(450, 320, 120, 50);
      fill(255);
     textSize(17)
    text("Voltar", 460, 355, 80);
} else if (tela == 5) {
    // Código da tela de jogo (Catching game)

    // Lógica do jogo de catching
    if (frameCount % 60 === 0) {
      drops.push(new Drop());
    }

    for (let i = drops.length - 1; i >= 0; i--) {
      drops[i].show();
      drops[i].fall();

      if (drops[i].hits(plane)) {
        drops.splice(i, 1);
      } else if (drops[i].y > height) {
        drops.splice(i, 1);
        // Adiciona esta linha para redirecionar para a tela 6 ao perder o jogo
        tela = 6;
      }
    }

    plane.show();
    plane.move();
} else if (tela == 6) {
    background(0)
    textSize(20);
  fill(255)
    text("Perdeu, clique no balão para voltar", 100, 140, 400);
  }else if (tela == 7) {
    image(introGif, 0, 0, width, height);
    textAlign(CENTER, CENTER);
    textSize(20);
    fill(255, 0, 0); // Vermelho
    text("Hotline Miami", width / 2, height / 2);
   
    
    movescreen();
    fill(255, 0, 0, 85);
    beginShape();
    vertex(width / 2 - 150, height / 2 - 50);
    vertex(width / 2 + 150, height / 2 - 50);
    vertex(width / 2 + 100, height / 2 + 50);
    vertex(width / 2 - 100, height / 2 + 50);
    endShape(CLOSE);
  }
if (tela >= 0 && tela <= 7) {
    fill(255);
    textSize(16);
    text("MouseX: " + mouseX + ", MouseY: " + mouseY, 200, 20);
  }
}

function movescreen() {
  let step = 5;
  if (directions[directionIndex] === 'up') {
    translate(0, -step);
  } else if (directions[directionIndex] === 'right') {
    translate(step, 0);
  } else if (directions[directionIndex] === 'down') {
    translate(0, step);
  } else if (directions[directionIndex] === 'left') {
    translate(-step, 0);
  }

  if (frameCount % 60 === 0) { // Muda a direção a cada segundo
    directionIndex = (directionIndex + 1) % directions.length;

    if (directionIndex === 0) { // Inverte a sequência após cada ciclo
      directions.reverse();
    }
  }
}
function mousePressed() {
  if (tela == 0) {
    if (mouseX > 70 && mouseX < 270 && mouseY > 200 && mouseY < 250) {
      console.log("Clique para ir para a tela 1");
      tela = 1;
    } else if (mouseX >330 && mouseX < 530 && mouseY > 200 && mouseY < 250) {
      console.log("Clique para ir para a tela 2");
      tela = 2;
    } else if (mouseX > 70 && mouseX < 270 && mouseY > 280 && mouseY < 330) {
      console.log("Clique para ir para a tela 3");
      tela = 3;
    }else if (mouseX > 330 && mouseX < 530 && mouseY > 280 && mouseY < 330) {
      console.log("Clique para ir para a tela 4");
      tela = 4;
    }
  } else if (tela == 1 || tela == 2 || tela==3 || tela==4) {
    if (mouseX > 450 && mouseX < 580 && mouseY > 330 && mouseY < 380) {
      console.log("Voltando para o menu");
      tela = 0;
    }
  }
if (tela == 1) {
  if (mouseX > 200 && mouseX < 300 && mouseY > 150 && mouseY < 210) { 
    console.log("Indo para o jogo");
    tela = 5;
  }
}

}
function mouseClicked() {
  // Lógica de clique durante o jogo
  if (tela == 5) {
    // Se o clique for dentro da área específica
    if (mouseX > 450 && mouseX < 580 && mouseY > 330 && mouseY < 380) {
      console.log("Clique para voltar para o menu na tela 5");
      // Remova esta linha se não quiser que o clique nesta área volte para o menu
      tela = 0;
    } else {
      // Adicione a lógica de clique específica para a tela 5 aqui
    }
  }
}
function mouseClicked(){
    if (tela == 6 || tela == 7) {
      console.log("voltando para o menu depois de perder ou da intro para o menu");
      tela=0;
      }
      }


    
class Drop {
  constructor() {
    this.x = random(width);
    this.y = 0;
    this.radius = 16;
    this.speed = 5;
  }

  show() {
    fill(255, 0, 0);
    ellipse(this.x, this.y, this.radius * 2);
  }

  fall() {
    this.y += this.speed;
  }

  hits(plane) {
    let d = dist(this.x, this.y, plane.x, plane.y);
    return d < this.radius + plane.width / 2 && this.y < plane.y;
  }
}

class Plane {
  constructor() {
    this.width = 60;
    this.height = 10;
    this.x = mouseX - this.width / 2;
    this.y = height - 20;
  }

  show() {
    fill(0, 0, 255);
    rect(this.x, this.y, this.width, this.height);
  }

  move() {
    this.x = mouseX - this.width / 2;
  }
 }
